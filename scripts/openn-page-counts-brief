#!/usr/bin/env ruby

require 'open-uri'
require 'csv'
require 'net/http'

require_relative '../lib/openn'

##
# For a given repository number (0001, 0002, 0003, etc.), pull down the CSV of
# the repositories online document and rewrite it in brief format appending
# the page counts. Output CSV will have this format:
#
# id,path,base_dir,created,updated,icount,directive_name
# 1,0001/ljs103,ljs103,2014-11-03T23:13:18+00:00,2015-04-22T15:17:04+00:00,4,ljs103
# 1,0001/ljs201,ljs201,2014-11-03T23:38:42+00:00,2015-04-22T15:17:05+00:00,2,ljs201
# 1,0001/ljs255,ljs255,2014-11-03T23:39:46+00:00,2015-04-22T15:17:06+00:00,2,ljs255
# 1,0001/ljs489,ljs489,2014-11-03T23:40:23+00:00,2015-04-22T15:17:07+00:00,2,ljs489
# 1,0001/ljsmisc1,ljsmisc1,2014-11-03T23:41:42+00:00,2015-04-22T15:17:07+00:00,2,ljsmisc1
# 1,0001/ljsmisc2,ljsmisc2,2014-11-03T23:42:45+00:00,2015-04-22T15:17:07+00:00,2,ljsmisc2
#

repo_number = ARGV.shift

abort "Please provide a collection number; got: #{repo_number}" unless repo_number

repo_tag = OPenn::repo_tag repo_number

# csv_uri = sprintf "%s/%s_contents.csv", OPenn::OPENN_DATA_URL, repo_tag
csv_uri = OPenn::csv_url repo_number

##
# Input looks like:
#
# document_id,path,title,metadata_type,created,updated
# 1,0001/ljs103,Reproduction of Sienese book covers.,TEI,2014-11-03T23:13:18+00:00,2015-04-22T15:17:04+00:00
# 2,0001/ljs201,Evangelista Torricelli letter to Marin Marsenne,TEI,2014-11-03T23:38:42+00:00,2015-04-22T15:17:05+00:00

out_csv = sprintf("%s_contents_brief.csv", repo_tag)

print "Writing: #{out_csv} ... "

errors = []
header = %w{id path base_dir created updated icount directive_name}
begin
  CSV.open out_csv, 'wb+', headers: true do |csv|
    csv << header
    CSV.parse URI.open(csv_uri).read, headers: true do |row|
      path = row['path']

      begin
      (out_row ||= {})['id']    = OPenn::get_repo_number(path).to_i
      out_row['path']           = path
      out_row['base_dir']       = File.basename path
      out_row['created']        = OPenn::get_created row
      out_row['updated']        = OPenn::get_updated row
      out_row['icount']         = OPenn::get_page_count path
      out_row['directive_name'] = File.basename path

      csv << out_row
      rescue NoManifestError => e
        errors << e.message
      end
    end
  end

  puts "done."

ensure
  unless errors.empty?
    STDERR.puts "WARNING: Errors found processing #{csv_uri}"
    errors.each do |err|
      STDERR.puts "ERROR: #{err}"
    end
  end
end