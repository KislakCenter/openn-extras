#!/usr/bin/env ruby

require 'open-uri'
require 'csv'
require 'net/http'

require_relative '../lib/openn'

##
# For a given repository number (0001, 0002, 0003, etc.), pull down the CSV of
# the repositories online document and rewrite it appending the number of master
# TIFFs (or JPEGs) associated with each object.
#
# Output CSV will have this format:
#
# document_id,path,title,metadata_type,created,updated,icount
# 1,0001/ljs103,Reproduction of Sienese book covers.,TEI,2014-11-03T23:13:18+00:00,2015-04-22T15:17:04+00:00,4
# 2,0001/ljs201,Evangelista Torricelli letter to Marin Marsenne,TEI,2014-11-03T23:38:42+00:00,2015-04-22T15:17:05+00:00,2
# 3,0001/ljs255,Manuscript leaf from De casibus virorum illustrium,TEI,2014-11-03T23:39:46+00:00,2015-04-22T15:17:06+00:00,2
# 4,0001/ljs489,Nawaz letter with seal,TEI,2014-11-03T23:40:23+00:00,2015-04-22T15:17:07+00:00,2
# 5,0001/ljsmisc1,Sluby family indenture :,TEI,2014-11-03T23:41:42+00:00,2015-04-22T15:17:07+00:00,2
#

COLLECTIONS = %w{ bibliophilly congregations genizah kislakcurated muslimworld diaries }

def valid_repo? number
  return true if number.to_s =~ /\A\d+\Z/
  return true if COLLECTIONS.include? number.to_s.strip.downcase
end

# def valid_repo number

def get_csv_uri number
  return sprintf "%s/%04d_contents.csv", OPenn::OPENN_DATA_URL, number if number.to_s =~ /\A\d+\Z/
  sprintf "%s/%s_contents.csv", OPenn::OPENN_DATA_URL, number.to_s.strip.downcase
end

# def normalized_repo number

def get_out_csv number
  return sprintf "%04d_contents.csv", number if number.to_s =~ /\A\d+\Z/
  sprintf "%s_contents.csv", number.to_s.strip.downcase
end

# def normalized_repo number

repo_number = ARGV.shift

abort "Please provide a collection number; got: #{repo_number}" unless valid_repo? repo_number

csv_uri = get_csv_uri repo_number

# document_id,path,title,metadata_type,created,updated
# 1,0001/ljs103,Reproduction of Sienese book covers.,TEI,2014-11-03T23:13:18+00:00,2015-04-22T15:17:04+00:00
# 2,0001/ljs201,Evangelista Torricelli letter to Marin Marsenne,TEI,2014-11-03T23:38:42+00:00,2015-04-22T15:17:05+00:00

out_csv = get_out_csv repo_number

print "Writing: #{out_csv} ... "

errors = []
header = %w{document_id path title metadata_type created updated icount repository_id repository_name repository_tag }
# begin black so we always print errors when we're done
begin
  CSV.open out_csv, 'wb+', headers: true do |csv|
    csv << header
    CSV.parse open(csv_uri).read, headers: true do |row|
      path = row['path']
      begin
        row['page_count'] = OPenn::get_page_count(path)
        csv << row
      rescue NoManifestError => e
        errors << e.message
      end
    end
  end

  puts "done."

ensure
  unless errors.empty?
    STDERR.puts "WARNING: Errors found processing #{csv_uri}"
    errors.each do |err|
      STDERR.puts "ERROR: #{err}"
    end
  end
end
